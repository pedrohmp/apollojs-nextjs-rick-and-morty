{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/pedrohmp/Documents/projetos/devtalks/apollojs-nextjs-rick-and-morty/src/components/Character.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport ALL_CHARACTERS from '../../gql/allCharacters';\nimport { useLazyQuery } from '@apollo/client';\nimport { Row, CharacterBtn } from '../styles/components/Character';\nimport getRandomValue from '../utils/getRandomValue';\nimport Skeleton from 'react-loading-skeleton';\n\nvar Character = function Character() {\n  _s();\n\n  var _personage$character$;\n\n  var _useState = useState(),\n      personage = _useState[0],\n      setPersonage = _useState[1];\n\n  var _useLazyQuery = useLazyQuery(ALL_CHARACTERS, {\n    notifyOnNetworkStatusChange: true,\n    ssr: true\n  }),\n      _useLazyQuery2 = _slicedToArray(_useLazyQuery, 2),\n      getRandomCharacter = _useLazyQuery2[0],\n      _useLazyQuery2$ = _useLazyQuery2[1],\n      data = _useLazyQuery2$.data,\n      error = _useLazyQuery2$.error,\n      loading = _useLazyQuery2$.loading;\n\n  useEffect(function () {\n    if (data) {\n      setPersonage(data);\n    }\n  }, [data]);\n  useEffect(function () {\n    getRandomCharacter({\n      variables: {\n        random: getRandomValue()\n      }\n    });\n  }, []);\n\n  if (loading || !personage) {\n    return __jsx(Row, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }\n    }, __jsx(Skeleton, {\n      count: 1,\n      duration: 1,\n      width: \"100%\",\n      height: 120,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }), __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }\n    }, __jsx(Skeleton, {\n      count: 1,\n      duration: 1,\n      width: \"100%\",\n      height: 30,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }\n    })));\n  }\n\n  if (error) {\n    return __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 12\n      }\n    }, \"Ocorreu um error\");\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, __jsx(\"img\", {\n    src: personage.character.image,\n    alt: personage.character.name,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }), __jsx(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, __jsx(\"li\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }, \"Nome: \", personage.character.name), __jsx(\"li\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, \"Especie: \", personage.character.species), __jsx(\"li\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, \"Status: \", personage.character.status), __jsx(\"li\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, \"Lugar: \", (_personage$character$ = personage.character.location) === null || _personage$character$ === void 0 ? void 0 : _personage$character$.name))), __jsx(SkeletonTheme, {\n    color: \"#202020\",\n    highlightColor: \"#444\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, __jsx(Skeleton, {\n    count: 1,\n    duration: 1,\n    width: 300,\n    height: 120,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  })), \";\", __jsx(CharacterBtn, {\n    onClick: function onClick() {\n      return getRandomCharacter({\n        variables: {\n          random: getRandomValue()\n        }\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, \"Gerar novo personagem!\"));\n};\n\n_s(Character, \"E7XcHOWAcFvcOZxRokALUSXFDuQ=\", false, function () {\n  return [useLazyQuery];\n});\n\n_c = Character;\nexport default Character;\n\nvar _c;\n\n$RefreshReg$(_c, \"Character\");","map":{"version":3,"sources":["/home/pedrohmp/Documents/projetos/devtalks/apollojs-nextjs-rick-and-morty/src/components/Character.tsx"],"names":["React","useState","useEffect","ALL_CHARACTERS","useLazyQuery","Row","CharacterBtn","getRandomValue","Skeleton","Character","personage","setPersonage","notifyOnNetworkStatusChange","ssr","getRandomCharacter","data","error","loading","variables","random","character","image","name","species","status","location"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport ALL_CHARACTERS from '../../gql/allCharacters'\n\nimport { useLazyQuery } from '@apollo/client'\n\nimport { Row, CharacterBtn } from '../styles/components/Character'\n\nimport getRandomValue from '../utils/getRandomValue'\n\nimport Skeleton from 'react-loading-skeleton'\n\ninterface Personage {\n  character: {\n    name: string\n    species: string\n    status: string\n    image: string\n    location: {\n      name: string\n    }\n  }\n}\n\nconst Character: React.FC = () => {\n  const [personage, setPersonage] = useState<Personage>()\n\n  const [getRandomCharacter, { data, error, loading }] = useLazyQuery(\n    ALL_CHARACTERS,\n    {\n      notifyOnNetworkStatusChange: true,\n      ssr: true\n    }\n  )\n\n  useEffect(() => {\n    if (data) {\n      setPersonage(data)\n    }\n  }, [data])\n\n  useEffect(() => {\n    getRandomCharacter({\n      variables: { random: getRandomValue() }\n    })\n  }, [])\n\n  if (loading || !personage) {\n    return (\n      <Row>\n        <Skeleton count={1} duration={1} width=\"100%\" height={120} />\n\n        <div>\n          <Skeleton count={1} duration={1} width=\"100%\" height={30} />\n        </div>\n      </Row>\n    )\n  }\n\n  if (error) {\n    return <div>Ocorreu um error</div>\n  }\n\n  return (\n    <>\n      <Row>\n        <img src={personage.character.image} alt={personage.character.name} />\n\n        <ul>\n          <li>Nome: {personage.character.name}</li>\n          <li>Especie: {personage.character.species}</li>\n          <li>Status: {personage.character.status}</li>\n          <li>Lugar: {personage.character.location?.name}</li>\n        </ul>\n      </Row>\n      <SkeletonTheme color=\"#202020\" highlightColor=\"#444\">\n        <Skeleton count={1} duration={1} width={300} height={120} />\n      </SkeletonTheme>\n      ;\n      <CharacterBtn\n        onClick={() =>\n          getRandomCharacter({\n            variables: { random: getRandomValue() }\n          })\n        }\n      >\n        Gerar novo personagem!\n      </CharacterBtn>\n    </>\n  )\n}\n\nexport default Character\n"]},"metadata":{},"sourceType":"module"}