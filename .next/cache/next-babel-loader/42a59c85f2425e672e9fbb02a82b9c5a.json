{"ast":null,"code":"var _jsxFileName = \"/home/pedrohmp/Documents/projetos/devtalks/apollojs-nextjs-rick-and-morty/src/components/Character.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport ALL_CHARACTERS from '../../gql/allCharacters';\nimport { useLazyQuery } from '@apollo/client';\nimport { Row, CharacterBtn } from '../styles/components/Character';\nimport getRandomValue from '../utils/getRandomValue';\nimport CharacterLoading from './CharacterLoading';\n\nconst Character = () => {\n  var _personage$character$;\n\n  const {\n    0: personage,\n    1: setPersonage\n  } = useState();\n  const [getRandomCharacter, {\n    data,\n    error,\n    loading\n  }] = useLazyQuery(ALL_CHARACTERS, {\n    notifyOnNetworkStatusChange: true,\n    ssr: true\n  });\n  useEffect(() => {\n    if (data) {\n      setPersonage(data);\n    }\n  }, [data]);\n  useEffect(() => {\n    getRandomCharacter({\n      variables: {\n        random: getRandomValue()\n      }\n    });\n  }, []);\n\n  if (error) {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 12\n      }\n    }, \"Ocorreu um error\");\n  }\n\n  return __jsx(React.Fragment, null, loading || !personage ? __jsx(CharacterLoading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }) : __jsx(React.Fragment, null, __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, __jsx(\"img\", {\n    src: personage.character.image,\n    alt: personage.character.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }), __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 15\n    }\n  }, \"Nome: \", personage.character.name), __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 15\n    }\n  }, \"Especie: \", personage.character.species), __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 15\n    }\n  }, \"Status: \", personage.character.status), __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 15\n    }\n  }, \"Lugar: \", (_personage$character$ = personage.character.location) === null || _personage$character$ === void 0 ? void 0 : _personage$character$.name)))), __jsx(CharacterBtn, {\n    onClick: () => getRandomCharacter({\n      variables: {\n        random: getRandomValue()\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, loading ? 'Carregando...' : 'Gerar novo personagem!'));\n};\n\nexport default Character;","map":{"version":3,"sources":["/home/pedrohmp/Documents/projetos/devtalks/apollojs-nextjs-rick-and-morty/src/components/Character.tsx"],"names":["React","useState","useEffect","ALL_CHARACTERS","useLazyQuery","Row","CharacterBtn","getRandomValue","CharacterLoading","Character","personage","setPersonage","getRandomCharacter","data","error","loading","notifyOnNetworkStatusChange","ssr","variables","random","character","image","name","species","status","location"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAOC,cAAP,MAA2B,yBAA3B;AAEA,SAASC,YAAT,QAA6B,gBAA7B;AAEA,SAASC,GAAT,EAAcC,YAAd,QAAkC,gCAAlC;AAEA,OAAOC,cAAP,MAA2B,yBAA3B;AAEA,OAAOC,gBAAP,MAA6B,oBAA7B;;AAcA,MAAMC,SAAmB,GAAG,MAAM;AAAA;;AAChC,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BV,QAAQ,EAA1C;AAEA,QAAM,CAACW,kBAAD,EAAqB;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAArB,IAAiDX,YAAY,CACjED,cADiE,EAEjE;AACEa,IAAAA,2BAA2B,EAAE,IAD/B;AAEEC,IAAAA,GAAG,EAAE;AAFP,GAFiE,CAAnE;AAQAf,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,IAAJ,EAAU;AACRF,MAAAA,YAAY,CAACE,IAAD,CAAZ;AACD;AACF,GAJQ,EAIN,CAACA,IAAD,CAJM,CAAT;AAMAX,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,kBAAkB,CAAC;AACjBM,MAAAA,SAAS,EAAE;AAAEC,QAAAA,MAAM,EAAEZ,cAAc;AAAxB;AADM,KAAD,CAAlB;AAGD,GAJQ,EAIN,EAJM,CAAT;;AAMA,MAAIO,KAAJ,EAAW;AACT,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAP;AACD;;AAED,SACE,4BACGC,OAAO,IAAI,CAACL,SAAZ,GACC,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAGC,4BACE,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,GAAG,EAAEA,SAAS,CAACU,SAAV,CAAoBC,KAD3B;AAEE,IAAA,GAAG,EAAEX,SAAS,CAACU,SAAV,CAAoBE,IAF3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAWZ,SAAS,CAACU,SAAV,CAAoBE,IAA/B,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAcZ,SAAS,CAACU,SAAV,CAAoBG,OAAlC,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAab,SAAS,CAACU,SAAV,CAAoBI,MAAjC,CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAAYd,SAAS,CAACU,SAAV,CAAoBK,QAAhC,0DAAY,sBAA8BH,IAA1C,CAJF,CANF,CADF,CAJJ,EAqBE,MAAC,YAAD;AACE,IAAA,OAAO,EAAE,MACPV,kBAAkB,CAAC;AACjBM,MAAAA,SAAS,EAAE;AAAEC,QAAAA,MAAM,EAAEZ,cAAc;AAAxB;AADM,KAAD,CAFtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOGQ,OAAO,GAAG,eAAH,GAAqB,wBAP/B,CArBF,CADF;AAiCD,CA5DD;;AA8DA,eAAeN,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport ALL_CHARACTERS from '../../gql/allCharacters'\n\nimport { useLazyQuery } from '@apollo/client'\n\nimport { Row, CharacterBtn } from '../styles/components/Character'\n\nimport getRandomValue from '../utils/getRandomValue'\n\nimport CharacterLoading from './CharacterLoading'\n\ninterface Personage {\n  character: {\n    name: string\n    species: string\n    status: string\n    image: string\n    location: {\n      name: string\n    }\n  }\n}\n\nconst Character: React.FC = () => {\n  const [personage, setPersonage] = useState<Personage>()\n\n  const [getRandomCharacter, { data, error, loading }] = useLazyQuery(\n    ALL_CHARACTERS,\n    {\n      notifyOnNetworkStatusChange: true,\n      ssr: true\n    }\n  )\n\n  useEffect(() => {\n    if (data) {\n      setPersonage(data)\n    }\n  }, [data])\n\n  useEffect(() => {\n    getRandomCharacter({\n      variables: { random: getRandomValue() }\n    })\n  }, [])\n\n  if (error) {\n    return <div>Ocorreu um error</div>\n  }\n\n  return (\n    <>\n      {loading || !personage ? (\n        <CharacterLoading />\n      ) : (\n        <>\n          <Row>\n            <img\n              src={personage.character.image}\n              alt={personage.character.name}\n            />\n\n            <ul>\n              <li>Nome: {personage.character.name}</li>\n              <li>Especie: {personage.character.species}</li>\n              <li>Status: {personage.character.status}</li>\n              <li>Lugar: {personage.character.location?.name}</li>\n            </ul>\n          </Row>\n        </>\n      )}\n\n      <CharacterBtn\n        onClick={() =>\n          getRandomCharacter({\n            variables: { random: getRandomValue() }\n          })\n        }\n      >\n        {loading ? 'Carregando...' : 'Gerar novo personagem!'}\n      </CharacterBtn>\n    </>\n  )\n}\n\nexport default Character\n"]},"metadata":{},"sourceType":"module"}