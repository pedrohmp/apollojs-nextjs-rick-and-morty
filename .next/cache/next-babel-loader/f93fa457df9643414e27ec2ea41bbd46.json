{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { useMemo } from 'react';\nimport { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client';\nimport { concatPagination } from '@apollo/client/utilities';\nlet apolloClient;\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: true,\n    link: new HttpLink({\n      uri: 'https://rickandmortyapi.com/graphql',\n      credentials: 'same-origin',\n      fetch\n    }),\n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {\n            allPosts: concatPagination()\n          }\n        }\n      }\n    })\n  });\n}\n\nexport function initializeApollo(initialState = null) {\n  var _apolloClient2;\n\n  const _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient(); // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n\n\n  if (initialState) {\n    // Get existing cache, loaded during client side data fetching\n    const existingCache = _apolloClient.extract(); // Restore the cache using the data passed from getStaticProps/getServerSideProps\n    // combined with the existing cached data\n\n\n    _apolloClient.cache.restore(_objectSpread(_objectSpread({}, existingCache), initialState));\n  } // For SSG and SSR always create a new Apollo Client\n\n\n  if (true) return _apolloClient; // Create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n}","map":{"version":3,"sources":["/home/pedrohmp/Documents/projetos/devtalks/apollojs-nextjs-rick-and-morty/libs/apolloClient.js"],"names":["useMemo","ApolloClient","HttpLink","InMemoryCache","concatPagination","apolloClient","createApolloClient","ssrMode","link","uri","credentials","fetch","cache","typePolicies","Query","fields","allPosts","initializeApollo","initialState","_apolloClient","existingCache","extract","restore","useApollo","store"],"mappings":";;;;;;AAAA;AACA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,YAAT,EAAuBC,QAAvB,EAAiCC,aAAjC,QAAsD,gBAAtD;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AAEA,IAAIC,YAAJ;;AAEA,SAASC,kBAAT,GAA8B;AAC5B,SAAO,IAAIL,YAAJ,CAAiB;AACtBM,IAAAA,OAAO,MADe;AAEtBC,IAAAA,IAAI,EAAE,IAAIN,QAAJ,CAAa;AACjBO,MAAAA,GAAG,EAAE,qCADY;AAEjBC,MAAAA,WAAW,EAAE,aAFI;AAGjBC,MAAAA;AAHiB,KAAb,CAFgB;AAOtBC,IAAAA,KAAK,EAAE,IAAIT,aAAJ,CAAkB;AACvBU,MAAAA,YAAY,EAAE;AACZC,QAAAA,KAAK,EAAE;AACLC,UAAAA,MAAM,EAAE;AACNC,YAAAA,QAAQ,EAAEZ,gBAAgB;AADpB;AADH;AADK;AADS,KAAlB;AAPe,GAAjB,CAAP;AAiBD;;AAED,OAAO,SAASa,gBAAT,CAA0BC,YAAY,GAAG,IAAzC,EAA+C;AAAA;;AACpD,QAAMC,aAAa,qBAAGd,YAAH,2DAAmBC,kBAAkB,EAAxD,CADoD,CAGpD;AACA;;;AACA,MAAIY,YAAJ,EAAkB;AAChB;AACA,UAAME,aAAa,GAAGD,aAAa,CAACE,OAAd,EAAtB,CAFgB,CAGhB;AACA;;;AACAF,IAAAA,aAAa,CAACP,KAAd,CAAoBU,OAApB,iCAAiCF,aAAjC,GAAmDF,YAAnD;AACD,GAXmD,CAYpD;;;AACA,YAAmC,OAAOC,aAAP,CAbiB,CAcpD;;AACA,MAAI,CAACd,YAAL,EAAmBA,YAAY,GAAGc,aAAf;AAEnB,SAAOA,aAAP;AACD;AAED,OAAO,SAASI,SAAT,CAAmBL,YAAnB,EAAiC;AACtC,QAAMM,KAAK,GAAGxB,OAAO,CAAC,MAAMiB,gBAAgB,CAACC,YAAD,CAAvB,EAAuC,CAACA,YAAD,CAAvC,CAArB;AACA,SAAOM,KAAP;AACD","sourcesContent":["/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { useMemo } from 'react'\nimport { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client'\nimport { concatPagination } from '@apollo/client/utilities'\n\nlet apolloClient\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: typeof window === 'undefined',\n    link: new HttpLink({\n      uri: 'https://rickandmortyapi.com/graphql',\n      credentials: 'same-origin',\n      fetch\n    }),\n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {\n            allPosts: concatPagination()\n          }\n        }\n      }\n    })\n  })\n}\n\nexport function initializeApollo(initialState = null) {\n  const _apolloClient = apolloClient ?? createApolloClient()\n\n  // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n  if (initialState) {\n    // Get existing cache, loaded during client side data fetching\n    const existingCache = _apolloClient.extract()\n    // Restore the cache using the data passed from getStaticProps/getServerSideProps\n    // combined with the existing cached data\n    _apolloClient.cache.restore({ ...existingCache, ...initialState })\n  }\n  // For SSG and SSR always create a new Apollo Client\n  if (typeof window === 'undefined') return _apolloClient\n  // Create the Apollo Client once in the client\n  if (!apolloClient) apolloClient = _apolloClient\n\n  return _apolloClient\n}\n\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState])\n  return store\n}\n"]},"metadata":{},"sourceType":"module"}