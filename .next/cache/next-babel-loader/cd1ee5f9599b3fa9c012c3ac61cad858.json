{"ast":null,"code":"var _jsxFileName = \"/home/pedrohmp/Documents/projetos/devtalks/apollojs-nextjs-rick-and-morty/src/components/Character.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport ALL_CHARACTERS from '../../gql/allCharacters';\nimport { useLazyQuery } from '@apollo/client';\nimport { Row, CharacterBtn } from '../styles/components/Character';\n\nconst Character = () => {\n  var _personage$character$;\n\n  const {\n    0: personage,\n    1: setPersonage\n  } = useState();\n  const [getRandomCharacter, {\n    data,\n    error,\n    loading\n  }] = useLazyQuery(ALL_CHARACTERS, {\n    notifyOnNetworkStatusChange: true,\n    ssr: true\n  });\n  useEffect(() => {\n    if (data) {\n      setPersonage(data);\n    }\n  }, [data]);\n  useEffect(() => {\n    getRandomCharacter({\n      variables: {\n        random: Math.floor(Math.random() * (493 - 1) + 1)\n      }\n    });\n  }, []);\n\n  if (loading || !personage) {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  }\n\n  if (error) {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 12\n      }\n    }, \"Ocorreu um error\");\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, __jsx(\"img\", {\n    src: personage.character.image,\n    alt: personage.character.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }), __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }, \"Nome: \", personage.character.name), __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }, \"Especie: \", personage.character.species), __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, \"Status: \", personage.character.status), __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }, \"Lugar: \", (_personage$character$ = personage.character.location) === null || _personage$character$ === void 0 ? void 0 : _personage$character$.name))), __jsx(CharacterBtn, {\n    onClick: () => getRandomCharacter({\n      variables: {\n        random: Math.floor(Math.random() * (493 - 1) + 1)\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, \"Gerar novo personagem!\"));\n};\n\nexport default Character;","map":{"version":3,"sources":["/home/pedrohmp/Documents/projetos/devtalks/apollojs-nextjs-rick-and-morty/src/components/Character.tsx"],"names":["React","useState","useEffect","ALL_CHARACTERS","useLazyQuery","Row","CharacterBtn","Character","personage","setPersonage","getRandomCharacter","data","error","loading","notifyOnNetworkStatusChange","ssr","variables","random","Math","floor","character","image","name","species","status","location"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAOC,cAAP,MAA2B,yBAA3B;AAEA,SAASC,YAAT,QAA6B,gBAA7B;AAEA,SAASC,GAAT,EAAcC,YAAd,QAAkC,gCAAlC;;AAgBA,MAAMC,SAAmB,GAAG,MAAM;AAAA;;AAChC,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BR,QAAQ,EAA1C;AAEA,QAAM,CAACS,kBAAD,EAAqB;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAArB,IAAiDT,YAAY,CACjED,cADiE,EAEjE;AACEW,IAAAA,2BAA2B,EAAE,IAD/B;AAEEC,IAAAA,GAAG,EAAE;AAFP,GAFiE,CAAnE;AAQAb,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,IAAJ,EAAU;AACRF,MAAAA,YAAY,CAACE,IAAD,CAAZ;AACD;AACF,GAJQ,EAIN,CAACA,IAAD,CAJM,CAAT;AAMAT,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,kBAAkB,CAAC;AACjBM,MAAAA,SAAS,EAAE;AAAEC,QAAAA,MAAM,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACD,MAAL,MAAiB,MAAM,CAAvB,IAA4B,CAAvC;AAAV;AADM,KAAD,CAAlB;AAGD,GAJQ,EAIN,EAJM,CAAT;;AAMA,MAAIJ,OAAO,IAAI,CAACL,SAAhB,EAA2B;AACzB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD;;AAED,MAAII,KAAJ,EAAW;AACT,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAP;AACD;;AAED,SACE,4BACE,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,GAAG,EAAEJ,SAAS,CAACY,SAAV,CAAoBC,KAA9B;AAAqC,IAAA,GAAG,EAAEb,SAAS,CAACY,SAAV,CAAoBE,IAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAWd,SAAS,CAACY,SAAV,CAAoBE,IAA/B,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAcd,SAAS,CAACY,SAAV,CAAoBG,OAAlC,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAaf,SAAS,CAACY,SAAV,CAAoBI,MAAjC,CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAAYhB,SAAS,CAACY,SAAV,CAAoBK,QAAhC,0DAAY,sBAA8BH,IAA1C,CAJF,CAHF,CADF,EAYE,MAAC,YAAD;AACE,IAAA,OAAO,EAAE,MACPZ,kBAAkB,CAAC;AACjBM,MAAAA,SAAS,EAAE;AAAEC,QAAAA,MAAM,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACD,MAAL,MAAiB,MAAM,CAAvB,IAA4B,CAAvC;AAAV;AADM,KAAD,CAFtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAZF,CADF;AAwBD,CAvDD;;AAyDA,eAAeV,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport ALL_CHARACTERS from '../../gql/allCharacters'\n\nimport { useLazyQuery } from '@apollo/client'\n\nimport { Row, CharacterBtn } from '../styles/components/Character'\n\nimport GetRandomValue from '../utils/getRandomValue'\n\ninterface Personage {\n  character: {\n    name: string\n    species: string\n    status: string\n    image: string\n    location: {\n      name: string\n    }\n  }\n}\n\nconst Character: React.FC = () => {\n  const [personage, setPersonage] = useState<Personage>()\n\n  const [getRandomCharacter, { data, error, loading }] = useLazyQuery(\n    ALL_CHARACTERS,\n    {\n      notifyOnNetworkStatusChange: true,\n      ssr: true\n    }\n  )\n\n  useEffect(() => {\n    if (data) {\n      setPersonage(data)\n    }\n  }, [data])\n\n  useEffect(() => {\n    getRandomCharacter({\n      variables: { random: Math.floor(Math.random() * (493 - 1) + 1) }\n    })\n  }, [])\n\n  if (loading || !personage) {\n    return <div>Loading...</div>\n  }\n\n  if (error) {\n    return <div>Ocorreu um error</div>\n  }\n\n  return (\n    <>\n      <Row>\n        <img src={personage.character.image} alt={personage.character.name} />\n\n        <ul>\n          <li>Nome: {personage.character.name}</li>\n          <li>Especie: {personage.character.species}</li>\n          <li>Status: {personage.character.status}</li>\n          <li>Lugar: {personage.character.location?.name}</li>\n        </ul>\n      </Row>\n\n      <CharacterBtn\n        onClick={() =>\n          getRandomCharacter({\n            variables: { random: Math.floor(Math.random() * (493 - 1) + 1) }\n          })\n        }\n      >\n        Gerar novo personagem!\n      </CharacterBtn>\n    </>\n  )\n}\n\nexport default Character\n"]},"metadata":{},"sourceType":"module"}